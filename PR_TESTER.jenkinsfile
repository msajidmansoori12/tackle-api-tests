@Library('migrationqe-automation-lib') _
def getChangedFilesList() {
    ArrayList<String> changedFiles = new ArrayList<String>()
    changedFiles = sh(script:"git diff HEAD..HEAD~1 --name-only",
    returnStdout:true).split('\n')
    return changedFiles
}

pipeline{
    agent {
        label 'minikube-node' 
    }
    environment{
        TACKLE_USER = "admin"
        TACKLE_PASSWORD = "Passw0rd!"
    }
    
    stages{
        stage("Check if their are changed tests"){
            when{
                allOf{
                    branch pattern: '^PR-.*$',
                    comparator: 'REGEXP';
                    expression{
                    getChangedFilesList().any { it=~ /^.*tests\/.*test_.*$/} == true
                    }
                }
            }
            steps{
                script{
                    checkout scm
                    env.RUN_TESTS = "true" 
                    changed_test_list = [] 
                    getChangedFilesList().each{
                        i ->
                        if(i.contains("test_")){
                            changed_test_list.add(i)
                        }
                    }
                    env.CHANGED_TEST_FILES = changed_test_list.join(" ")
                }
            }
        }
        stage('Install & run minikube'){
            when {  
                expression{
                    env.RUN_TESTS == "true"
                }
            }   
            steps{
                script{
                    
                    sh """ curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                            chmod +x minikube
                            minikube_homedir=/usr/local/bin/

                            sudo install minikube /usr/local/bin

                            minikube delete
                            sleep 20s
                            minikube start --driver=podman --memory=4g
                            minikube addons enable dashboard
                            minikube addons enable ingress
                            minikube addons enable olm
                            kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
                            kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml

                            kubectl apply -f https://raw.githubusercontent.com/konveyor/tackle2-operator/main/tackle-k8s.yaml

                            while [ \$(kubectl get crd|grep tackle|wc -l) != 2 ]
                            do echo "Waiting for Tackle CRDs..."
                            sleep 5s
                            done

                            """

                            echo "Applying tackle CR"
                            tackle.applyTackleCR() //Tackle CR will be applied with using default password `Passw0rd!`.
                }
            }
        }
        stage('Run tackle api tests'){
           when { 
                expression{
                    env.RUN_TESTS == "true"
                }
            }   
            steps{
                script{
                    //This is a known issue sometimes the virtualenv exists and throws an error. 
                    sh """
                    rm -rf \$(pipenv --venv) 
                    pipenv run pip install -r requirements.txt
                    """
                    env.TACKLE_URL = "http://"+sh(
                        script : 'minikube ip',
                        returnStdout: true
                    ).trim()

                    ocp.pollRouteUntilReady(env.TACKLE_URL,15,30)
                    repo.checkout("https://gitlab.cee.redhat.com/mta-qe/tackle-api-tests-config.git","main")
                    sh "sleep 40s" //Grace period after the application is serving correctly.
                    sh "pipenv run pytest -v ${CHANGED_TEST_FILES} --tc-file=$WORKSPACE/tackle-api-tests-config/config.json --tc-format=json"
                }
            }
        }
    }
    post{
        always{
            script{
                cleanWs()
            }
        }
    }
}
